import sys
import os

# Fix PyQt5 plugin path issue
def fix_pyqt5_path():
    try:
        import PyQt5
        pyqt5_path = os.path.dirname(PyQt5.__file__)
        qt_plugin_path = os.path.join(pyqt5_path, 'Qt5', 'plugins')
        if os.path.exists(qt_plugin_path):
            os.environ['QT_PLUGIN_PATH'] = qt_plugin_path
            os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = qt_plugin_path
    except:
        pass

fix_pyqt5_path()

from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QGridLayout, QLabel, QLineEdit, QPushButton, 
                            QTextEdit, QGroupBox, QMessageBox, QFrame, QSplitter)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap, QIcon
import threading
import queue

# Th√™m th∆∞ m·ª•c parent ƒë·ªÉ c√≥ th·ªÉ import t·ª´ client/
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from client_tcp import ClientTCP
from group import GroupProtocol
from utils import decode_message

class MessageListener(QThread):
    """Thread ƒë·ªÉ l·∫Øng nghe tin nh·∫Øn t·ª´ server"""
    message_received = pyqtSignal(dict)
    connection_lost = pyqtSignal()
    
    def __init__(self, client):
        super().__init__()
        self.client = client
        self.running = True
        
    def run(self):
        while self.running:
            try:
                if self.client and self.client.sock:
                    response = self.client.receive()
                    self.message_received.emit(response)
            except Exception as e:
                self.connection_lost.emit()
                break
                
    def stop(self):
        self.running = False

class PycTalkGUIApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.client = None
        self.group_protocol = None
        self.username = ""
        self.is_connected = False
        self.current_group_id = ""
        
        # Response waiting system
        self.waiting_for_response = False
        self.response_callback = None
        self.message_listener = None
        
        self.init_ui()
        
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        self.setWindowTitle("üó®Ô∏è PycTalk - Group Chat")
        self.setGeometry(100, 100, 1000, 700)
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f2f5;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QPushButton {
                background-color: #0084ff;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #006ce7;
            }
            QPushButton:pressed {
                background-color: #0056b3;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
            QLineEdit {
                padding: 8px;
                border: 2px solid #ddd;
                border-radius: 6px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border-color: #0084ff;
            }
            QTextEdit {
                border: 2px solid #ddd;
                border-radius: 6px;
                padding: 8px;
                font-family: 'Consolas', 'Monaco', monospace;
            }
        """)
        
        # Central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Title
        title_label = QLabel("üó®Ô∏è PycTalk - Group Chat Application")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setFont(QFont("Arial", 18, QFont.Bold))
        title_label.setStyleSheet("color: #2c3e50; margin-bottom: 20px;")
        main_layout.addWidget(title_label)
        
        # Connection section
        self.setup_connection_section(main_layout)
        
        # Main content area with splitter
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)
        
        # Left panel - Group management
        self.setup_left_panel(splitter)
        
        # Right panel - Chat display
        self.setup_right_panel(splitter)
        
        # Set splitter proportions
        splitter.setSizes([400, 600])
        
        # Status bar
        self.statusBar().showMessage("üî¥ Ch∆∞a k·∫øt n·ªëi")
        
    def setup_connection_section(self, parent_layout):
        """Thi·∫øt l·∫≠p ph·∫ßn k·∫øt n·ªëi"""
        conn_group = QGroupBox("K·∫øt n·ªëi Server")
        conn_layout = QHBoxLayout()
        
        # Username input
        conn_layout.addWidget(QLabel("Username:"))
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("Nh·∫≠p username c·ªßa b·∫°n...")
        self.username_input.returnPressed.connect(self.connect_to_server)
        conn_layout.addWidget(self.username_input)
        
        # Connect button
        self.connect_btn = QPushButton("üîó K·∫øt n·ªëi")
        self.connect_btn.clicked.connect(self.connect_to_server)
        conn_layout.addWidget(self.connect_btn)
        
        # Status label
        self.status_label = QLabel("üî¥ Ch∆∞a k·∫øt n·ªëi")
        self.status_label.setStyleSheet("color: red; font-weight: bold;")
        conn_layout.addWidget(self.status_label)
        
        conn_group.setLayout(conn_layout)
        parent_layout.addWidget(conn_group)
        
    def setup_left_panel(self, splitter):
        """Thi·∫øt l·∫≠p panel b√™n tr√°i"""
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Create group section
        create_group = QGroupBox("üÜï T·∫°o nh√≥m m·ªõi")
        create_layout = QVBoxLayout()
        
        # Group name
        create_layout.addWidget(QLabel("T√™n nh√≥m:"))
        self.group_name_input = QLineEdit()
        self.group_name_input.setPlaceholderText("Nh·∫≠p t√™n nh√≥m...")
        create_layout.addWidget(self.group_name_input)
        
        # Members
        create_layout.addWidget(QLabel("Th√†nh vi√™n (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y):"))
        self.members_input = QLineEdit()
        self.members_input.setPlaceholderText("alice, bob, charlie...")
        create_layout.addWidget(self.members_input)
        
        # Hint
        hint_label = QLabel("üí° G·ª£i √Ω: alice, bob, charlie, david, emma")
        hint_label.setStyleSheet("color: gray; font-size: 12px;")
        create_layout.addWidget(hint_label)
        
        # Create button
        self.create_group_btn = QPushButton("üÜï T·∫°o nh√≥m")
        self.create_group_btn.setEnabled(False)
        self.create_group_btn.clicked.connect(self.create_group)
        create_layout.addWidget(self.create_group_btn)
        
        create_group.setLayout(create_layout)
        left_layout.addWidget(create_group)
        
        # Send message section
        send_group = QGroupBox("üì§ G·ª≠i tin nh·∫Øn")
        send_layout = QVBoxLayout()
        
        # Group ID
        send_layout.addWidget(QLabel("Group ID:"))
        self.group_id_input = QLineEdit()
        self.group_id_input.setPlaceholderText("Nh·∫≠p ho·∫∑c paste Group ID...")
        send_layout.addWidget(self.group_id_input)
        
        # Message
        send_layout.addWidget(QLabel("Tin nh·∫Øn:"))
        self.message_input = QLineEdit()
        self.message_input.setPlaceholderText("Nh·∫≠p tin nh·∫Øn...")
        self.message_input.returnPressed.connect(self.send_message)
        send_layout.addWidget(self.message_input)
        
        # Send button
        self.send_btn = QPushButton("üì§ G·ª≠i tin nh·∫Øn")
        self.send_btn.setEnabled(False)
        self.send_btn.clicked.connect(self.send_message)
        send_layout.addWidget(self.send_btn)
        
        send_group.setLayout(send_layout)
        left_layout.addWidget(send_group)
        
        # Stretch to push everything to top
        left_layout.addStretch()
        
        splitter.addWidget(left_widget)
        
    def setup_right_panel(self, splitter):
        """Thi·∫øt l·∫≠p panel b√™n ph·∫£i"""
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        # Chat display
        chat_group = QGroupBox("üí¨ Tin nh·∫Øn")
        chat_layout = QVBoxLayout()
        
        # Messages area
        self.messages_display = QTextEdit()
        self.messages_display.setReadOnly(True)
        self.messages_display.setMinimumHeight(400)
        chat_layout.addWidget(self.messages_display)
        
        # Clear button
        clear_btn = QPushButton("üóëÔ∏è X√≥a tin nh·∫Øn")
        clear_btn.clicked.connect(self.clear_messages)
        chat_layout.addWidget(clear_btn)
        
        chat_group.setLayout(chat_layout)
        right_layout.addWidget(chat_group)
        
        splitter.addWidget(right_widget)
        
    def add_message(self, message, msg_type="info"):
        """Th√™m tin nh·∫Øn v√†o display"""
        colors = {
            "info": "#333333",
            "success": "#28a745", 
            "error": "#dc3545",
            "system": "#007bff",
            "group_id": "#6f42c1",
            "message": "#000000"
        }
        
        color = colors.get(msg_type, "#333333")
        formatted_message = f'<span style="color: {color};">{message}</span>'
        
        self.messages_display.append(formatted_message)
        
        # Auto scroll to bottom
        scrollbar = self.messages_display.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
    def clear_messages(self):
        """X√≥a t·∫•t c·∫£ tin nh·∫Øn"""
        self.messages_display.clear()
        
    def connect_to_server(self):
        """K·∫øt n·ªëi ƒë·∫øn server"""
        if self.is_connected:
            self.disconnect_from_server()
            return
            
        username = self.username_input.text().strip()
        if not username:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p username!")
            return
            
        try:
            self.add_message("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn server...", "system")
            self.client = ClientTCP()
            self.group_protocol = GroupProtocol(self.client)
            self.username = username
            
            # Login
            self.group_protocol.login(username)
            response = self.client.receive()
            
            if response.get("status") == "ok":
                self.is_connected = True
                self.connect_btn.setText("üîå Ng·∫Øt k·∫øt n·ªëi")
                self.status_label.setText(f"üü¢ K·∫øt n·ªëi: {username}")
                self.status_label.setStyleSheet("color: green; font-weight: bold;")
                self.create_group_btn.setEnabled(True)
                self.send_btn.setEnabled(True)
                self.username_input.setEnabled(False)
                
                self.add_message(f"‚úÖ {response.get('message', 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng')}", "success")
                self.statusBar().showMessage(f"üü¢ ƒê√£ k·∫øt n·ªëi v·ªõi username: {username}")
                
                # Start message listener
                self.start_message_listener()
            else:
                self.add_message(f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {response.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}", "error")
                self.client.close()
                
        except Exception as e:
            self.add_message(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi: {str(e)}", "error")
            QMessageBox.critical(self, "L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server:\n{str(e)}")
            
    def disconnect_from_server(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        if self.message_listener:
            self.message_listener.stop()
            self.message_listener.wait()
            
        if self.client:
            self.client.close()
            
        self.is_connected = False
        self.connect_btn.setText("üîó K·∫øt n·ªëi")
        self.status_label.setText("üî¥ Ch∆∞a k·∫øt n·ªëi")
        self.status_label.setStyleSheet("color: red; font-weight: bold;")
        self.create_group_btn.setEnabled(False)
        self.send_btn.setEnabled(False)
        self.username_input.setEnabled(True)
        self.add_message("üî¥ ƒê√£ ng·∫Øt k·∫øt n·ªëi", "system")
        self.statusBar().showMessage("üî¥ ƒê√£ ng·∫Øt k·∫øt n·ªëi")
        
    def start_message_listener(self):
        """B·∫Øt ƒë·∫ßu l·∫Øng nghe tin nh·∫Øn"""
        self.message_listener = MessageListener(self.client)
        self.message_listener.message_received.connect(self.handle_message)
        self.message_listener.connection_lost.connect(self.on_connection_lost)
        self.message_listener.start()
        
    def handle_message(self, response):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ server"""
        if self.waiting_for_response and self.response_callback:
            # Handle expected response
            self.response_callback(response)
        else:
            # Handle other messages
            msg_type = response.get("type")
            
            if msg_type == "group_message":
                group_id = response["group_id"]
                sender = response["sender"]
                content = response["message"]
                group_name = response.get("group_name", group_id)
                
                self.add_message(f"üí¨ [{group_name}] {sender}: {content}", "message")
            else:
                self.add_message(f"üì• Nh·∫≠n tin: {response}", "system")
                
    def on_connection_lost(self):
        """X·ª≠ l√Ω khi m·∫•t k·∫øt n·ªëi"""
        self.add_message("‚ùå M·∫•t k·∫øt n·ªëi ƒë·∫øn server", "error")
        self.disconnect_from_server()
        
    def create_group(self):
        """T·∫°o nh√≥m m·ªõi"""
        if not self.is_connected:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng k·∫øt n·ªëi tr∆∞·ªõc!")
            return
            
        if self.waiting_for_response:
            QMessageBox.information(self, "Th√¥ng b√°o", "ƒêang ƒë·ª£i ph·∫£n h·ªìi t·ª´ server...")
            return
            
        group_name = self.group_name_input.text().strip()
        members_str = self.members_input.text().strip()
        
        if not group_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n nh√≥m!")
            return
            
        if not members_str:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p danh s√°ch th√†nh vi√™n!")
            return
            
        members = [m.strip() for m in members_str.split(",") if m.strip()]
        if not members:
            QMessageBox.warning(self, "L·ªói", "Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá!")
            return
            
        try:
            self.add_message(f"üîÑ ƒêang t·∫°o nh√≥m '{group_name}' v·ªõi th√†nh vi√™n: {', '.join(members)}", "system")
            
            # Set up response callback
            self.waiting_for_response = True
            self.response_callback = self.handle_create_group_response
            self.create_group_btn.setEnabled(False)
            
            # Send request
            self.group_protocol.create_group(group_name, members)
            
            # Set timeout
            QTimer.singleShot(5000, self.reset_response_waiting)
                
        except Exception as e:
            self.waiting_for_response = False
            self.response_callback = None
            self.create_group_btn.setEnabled(True)
            self.add_message(f"‚ùå L·ªói t·∫°o nh√≥m: {str(e)}", "error")
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi t·∫°o nh√≥m:\n{str(e)}")
            
    def handle_create_group_response(self, response):
        """X·ª≠ l√Ω response c·ªßa create_group"""
        status = response.get("status")
        
        if status == "ok":
            group_id = response.get("group_id")
            message = response.get("message")
            self.add_message(f"‚úÖ {message}", "success")
            self.add_message(f"üÜî Group ID: {group_id}", "group_id")
            self.group_id_input.setText(group_id)
            
            # Clear form
            self.group_name_input.clear()
            self.members_input.clear()
            
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ t·∫°o nh√≥m th√†nh c√¥ng!\nGroup ID: {group_id}")
            
        elif status == "error":
            error_msg = response.get("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
            self.add_message(f"‚ö†Ô∏è L·ªói t·∫°o nh√≥m: {error_msg}", "error")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o nh√≥m:\n{error_msg}")
        else:
            self.add_message(f"üì• Response kh√¥ng x√°c ƒë·ªãnh: {response}", "system")
            
        # Reset waiting state
        self.waiting_for_response = False
        self.response_callback = None
        self.create_group_btn.setEnabled(True)
        
    def send_message(self):
        """G·ª≠i tin nh·∫Øn nh√≥m"""
        if not self.is_connected:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng k·∫øt n·ªëi tr∆∞·ªõc!")
            return
            
        if self.waiting_for_response:
            QMessageBox.information(self, "Th√¥ng b√°o", "ƒêang ƒë·ª£i ph·∫£n h·ªìi t·ª´ server...")
            return
            
        group_id = self.group_id_input.text().strip()
        message = self.message_input.text().strip()
        
        if not group_id:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p Group ID!")
            return
            
        if not message:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p tin nh·∫Øn!")
            return
            
        try:
            # Set up response callback
            self.waiting_for_response = True
            self.response_callback = self.handle_send_message_response
            self.send_btn.setEnabled(False)
            
            # Send message
            self.group_protocol.send_group_message(group_id, message)
            self.add_message(f"üì§ [{self.username}]: {message}", "message")
            
            # Clear message input
            self.message_input.clear()
            
            # Set timeout
            QTimer.singleShot(5000, self.reset_response_waiting)
                
        except Exception as e:
            self.waiting_for_response = False
            self.response_callback = None
            self.send_btn.setEnabled(True)
            self.add_message(f"‚ùå L·ªói g·ª≠i tin nh·∫Øn: {str(e)}", "error")
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi g·ª≠i tin nh·∫Øn:\n{str(e)}")
            
    def handle_send_message_response(self, response):
        """X·ª≠ l√Ω response c·ªßa send_message"""
        status = response.get("status")
        
        if status == "ok":
            self.add_message(f"‚úÖ {response.get('message', 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i')}", "success")
        elif status == "error":
            error_msg = response.get("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
            self.add_message(f"‚ö†Ô∏è L·ªói g·ª≠i tin nh·∫Øn: {error_msg}", "error")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn:\n{error_msg}")
            
        # Reset waiting state
        self.waiting_for_response = False
        self.response_callback = None
        self.send_btn.setEnabled(True)
        
    def reset_response_waiting(self):
        """Reset response waiting state (timeout)"""
        if self.waiting_for_response:
            self.waiting_for_response = False
            self.response_callback = None
            self.create_group_btn.setEnabled(True)
            self.send_btn.setEnabled(True)
            self.add_message("‚è∞ Timeout - kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server", "error")
            
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        if self.is_connected:
            self.disconnect_from_server()
        event.accept()

def run_group_gui():
    """Function ƒë·ªÉ ch·∫°y GUI version"""
    app = QApplication(sys.argv)
    
    # Set application properties
    app.setApplicationName("PycTalk")
    app.setApplicationVersion("1.0")
    app.setOrganizationName("PycTalk Team")
    
    # Create and show main window
    window = PycTalkGUIApp()
    window.show()
    
    # Run application
    sys.exit(app.exec_())

if __name__ == "__main__":
    run_group_gui()