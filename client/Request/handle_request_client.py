import socket
import json
import threading
import time
import random

class PycTalkClient:
    def __init__(self, server_host='127.0.0.1', server_port=9000):
        self.server_host = server_host
        self.server_port = server_port
        self.sock = None
        self.running = False
        
        # === Bi·∫øn ƒë·ªÉ ƒëi·ªÅu khi·ªÉn ping thread ===
        self.ping_running = False
        self.ping_thread = None

    def connect(self):
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((self.server_host, self.server_port))
            self.running = True
            print("üîó ƒê√£ k·∫øt n·ªëi ƒë·∫øn server.")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False

    def disconnect(self):
        # Ng·∫Øt ping tr∆∞·ªõc
        self.stop_ping()
        
        self.running = False
        if self.sock:
            try:
                self.sock.close()
                print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi server.")
            except:
                pass

    def send_json(self, data: dict):
        try:
            if not self.sock:
                print("‚ö†Ô∏è Ch∆∞a c√≥ k·∫øt n·ªëi.")
                return

            json_request = json.dumps(data).encode()
            prefix = len(json_request).to_bytes(4, 'big')
            self.sock.sendall(prefix + json_request)

            # Nh·∫≠n ph·∫£n h·ªìi
            length_prefix = self.sock.recv(4)
            if not length_prefix:
                print("‚ö†Ô∏è Server kh√¥ng ph·∫£n h·ªìi.")
                return

            response_length = int.from_bytes(length_prefix, 'big')
            response_data = b''
            while len(response_data) < response_length:
                chunk = self.sock.recv(response_length - len(response_data))
                if not chunk:
                    break
                response_data += chunk

            response = json.loads(response_data.decode())
            print("üì• Ph·∫£n h·ªìi t·ª´ server:", response)
            return response
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i/nh·∫≠n d·ªØ li·ªáu: {e}")
            self.disconnect()

    def register(self, username, password, email):
        if not self.connect():
            return
        request = {
            "action": "register",
            "data": {
                "username": username,
                "password": password,
                "email": email
            }
        }
        response = self.send_json(request)
        if response and response.get("success"):
            print("‚úÖ ƒêƒÉng k√≠ th√†nh c√¥ng, gi·ªØ k·∫øt n·ªëi ch·ªù c√°c l·ªánh kh√°c...")
            self.start_ping(username)
            self.idle_mode(username)
        else:
            self.disconnect()

    def login(self, username, password):
        if not self.connect():
            return
        request = {
            "action": "login",
            "data": {
                "username": username,
                "password": password
            }
        }
        response = self.send_json(request)
        if response and response.get("success"):
            print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, gi·ªØ k·∫øt n·ªëi ch·ªù c√°c l·ªánh kh√°c...")
            self.start_ping(username)
            self.idle_mode(username)
        else:
            self.disconnect()

    def idle_mode(self, username=None):
        try:
            while self.running:
                cmd = input("Nh·∫≠p l·ªánh (logout / exit): ").strip().lower()
                if cmd == "logout":
                    if username:
                        self.send_json({"action": "logout", "data": {"username": username}})
                    print("üö™ ƒê√£ ƒëƒÉng xu·∫•t.")
                    break
                elif cmd == "exit":
                    print("üëã Tho√°t client.")
                    break
                else:
                    print("‚ùì L·ªánh kh√¥ng h·ª£p l·ªá.")
        finally:
            self.disconnect()

    def start_ping(self, username):
        # G·ª≠i ping ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
        def ping_loop():
            while self.ping_running and self.running:
                try:
                    time.sleep(15)  # m·ªói 15s
                    if self.ping_running and self.running:
                        self.send_json({"action": "ping", "data": {"username": username}})
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói ping: {e}")
                    break
                    
        # N·∫øu ƒë√£ c√≥ thread ping ƒëang ch·∫°y th√¨ kh√¥ng t·∫°o th√™m
        if self.ping_running:
            return

        self.ping_running = True
        self.ping_thread = threading.Thread(target=ping_loop, daemon=True)
        self.ping_thread.start()
        
    def stop_ping(self):
        """
        D·ª´ng g·ª≠i ping
        """
        self.ping_running = False
        if self.ping_thread and self.ping_thread.is_alive():
            self.ping_thread.join(timeout=0.1)
