# server/app.py - ·ª®ng d·ª•ng qu·∫£n l√Ω database PyC Talk

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from connection_handler_pymysql import get_connection, query_data
import pymysql

class PyCTalkApp:
    def __init__(self):
        self.running = True
        
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        
    def show_header(self):
        print("=" * 50)
        print("üöÄ PYC TALK - DATABASE MANAGER")
        print("=" * 50)
        
    def show_menu(self):
        print("\nüìã MENU CH√çNH:")
        print("1. Ki·ªÉm tra k·∫øt n·ªëi database")
        print("2. Hi·ªÉn th·ªã danh s√°ch b·∫£ng")
        print("3. Xem d·ªØ li·ªáu users")
        print("4. Xem d·ªØ li·ªáu messages")
        print("5. Th√™m user m·ªõi")
        print("6. Th·ª±c hi·ªán truy v·∫•n t√πy ch·ªânh")
        print("7. Tho√°t")
        print("-" * 30)
        
    def test_connection(self):
        print("\nüîç ƒêang ki·ªÉm tra k·∫øt n·ªëi...")
        conn = get_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("SELECT VERSION()")
                version = cursor.fetchone()
                print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
                print(f"üìä MySQL Version: {version[0]}")
                cursor.close()
                conn.close()
                return True
            except Exception as err:
                print(f"‚ùå L·ªói: {err}")
                return False
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")
            return False
            
    def show_tables(self):
        print("\nüìã Danh s√°ch b·∫£ng trong database:")
        conn = get_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("SHOW TABLES")
                tables = cursor.fetchall()
                if tables:
                    for i, table in enumerate(tables, 1):
                        print(f"  {i}. {table[0]}")
                else:
                    print("  Kh√¥ng c√≥ b·∫£ng n√†o trong database")
                cursor.close()
                conn.close()
            except Exception as err:
                print(f"‚ùå L·ªói: {err}")
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")
            
    def show_users(self):
        print("\nüë• Danh s√°ch Users:")
        try:
            results = query_data("SELECT * FROM users LIMIT 10")
            if results:
                print(f"{'ID':<5} {'Username':<15} {'Email':<25} {'Created':<20}")
                print("-" * 65)
                for row in results:
                    print(f"{row[0]:<5} {row[1]:<15} {row[2]:<25} {str(row[3]):<20}")
            else:
                print("  Kh√¥ng c√≥ d·ªØ li·ªáu users ho·∫∑c b·∫£ng kh√¥ng t·ªìn t·∫°i")
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            
    def show_messages(self):
        print("\nüí¨ Danh s√°ch Messages:")
        try:
            results = query_data("SELECT * FROM messages LIMIT 10")
            if results:
                print(f"{'ID':<5} {'From':<10} {'To':<10} {'Message':<30} {'Time':<20}")
                print("-" * 75)
                for row in results:
                    message = row[3][:27] + "..." if len(str(row[3])) > 30 else row[3]
                    print(f"{row[0]:<5} {row[1]:<10} {row[2]:<10} {message:<30} {str(row[4]):<20}")
            else:
                print("  Kh√¥ng c√≥ d·ªØ li·ªáu messages ho·∫∑c b·∫£ng kh√¥ng t·ªìn t·∫°i")
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            
    def add_user(self):
        print("\n‚ûï Th√™m User M·ªõi:")
        username = input("Nh·∫≠p username: ").strip()
        email = input("Nh·∫≠p email: ").strip()
        password = input("Nh·∫≠p password: ").strip()
        
        if username and email and password:
            conn = get_connection()
            if conn:
                try:
                    cursor = conn.cursor()
                    query = "INSERT INTO users (username, email, password) VALUES (%s, %s, %s)"
                    cursor.execute(query, (username, email, password))
                    conn.commit()
                    print(f"‚úÖ ƒê√£ th√™m user '{username}' th√†nh c√¥ng!")
                    cursor.close()
                    conn.close()
                except Exception as err:
                    print(f"‚ùå L·ªói: {err}")
            else:
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            
    def custom_query(self):
        print("\nüîß Th·ª±c hi·ªán truy v·∫•n t√πy ch·ªânh:")
        print("V√≠ d·ª•: SELECT * FROM users WHERE username LIKE '%admin%'")
        query = input("Nh·∫≠p truy v·∫•n SQL: ").strip()
        
        if query:
            try:
                results = query_data(query)
                if results:
                    print(f"\nüìä K·∫øt qu·∫£ ({len(results)} d√≤ng):")
                    for i, row in enumerate(results[:20], 1):  # Gi·ªõi h·∫°n 20 d√≤ng
                        print(f"  {i}. {row}")
                    if len(results) > 20:
                        print(f"  ... v√† {len(results) - 20} d√≤ng kh√°c")
                else:
                    print("  Kh√¥ng c√≥ k·∫øt qu·∫£ ho·∫∑c truy v·∫•n th·∫•t b·∫°i")
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p truy v·∫•n!")
            
    def run(self):
        while self.running:
            self.clear_screen()
            self.show_header()
            self.show_menu()
            
            try:
                choice = input("Ch·ªçn ch·ª©c nƒÉng (1-7): ").strip()
                
                if choice == "1":
                    self.test_connection()
                elif choice == "2":
                    self.show_tables()
                elif choice == "3":
                    self.show_users()
                elif choice == "4":
                    self.show_messages()
                elif choice == "5":
                    self.add_user()
                elif choice == "6":
                    self.custom_query()
                elif choice == "7":
                    print("\nüëã T·∫°m bi·ªát!")
                    self.running = False
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                    
                if self.running and choice != "7":
                    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    
            except KeyboardInterrupt:
                print("\n\nüëã T·∫°m bi·ªát!")
                self.running = False
            except Exception as e:
                print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
                input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = PyCTalkApp()
    app.run()
